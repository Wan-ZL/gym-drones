'''
Project     ：gym-drones 
File        ：figure_generate.py
Author      ：Zelin Wan
Date        ：11/8/22
Description : Read events.out.tfevents data files and generate figures. Even if the event data is generated by
tensorboard in PyTorch, use TensorFlow library to extract the data.
(In Wan's laptop, use conda environment named 'TensorFlow')
'''

# import pandas as pd
# from matplotlib import pyplot as plt
from scipy import stats
import numpy as np
from os import listdir
import tensorflow as tf
import glob
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.python.summary.summary_iterator import summary_iterator



print(tf. __version__)


def get_average_value(setting_folder, scheme_name, trial_id, tag_name, print_log=False):
    '''

    Args:
        setting_folder:
        scheme_name:
        trial_id:
        tag_name:
        print_log:

    Returns: the average value of the last 10 percent of the selected data file with a tag given.

    '''
    path_list = glob.glob('data/'+setting_folder+'/runs_'+scheme_name+'/*--Trial_'+str(trial_id)+'-eps')
    path = path_list[0] + '/'   # this should only have one result

    file_list = [f for f in listdir(path) if not f.startswith('.')]
    print("listdir(path)", file_list)
    # file_name = listdir(path)[0]        # only one file in the directory
    file_name = file_list[0]
    if print_log: print(path + file_name)

    value_set = []
    print("path + file_name", path + file_name)
    for summary_set in tf.compat.v1.train.summary_iterator(path + file_name):
        for value in summary_set.summary.value:
            if value.tag == tag_name:
                value_set.append(value.simple_value)
                if print_log: print("step", summary_set.step, tag_name+" value", value.simple_value)

    # get last 10 percent element in the 'value_set'
    last_10_size = int(len(value_set)/10)
    value_set_last_10 = value_set[-last_10_size:]
    ave_value = sum(value_set_last_10)/len(value_set_last_10) if len(value_set_last_10) else 0
    if print_log: print("average", ave_value)
    return ave_value


def get_average_value_with_path(file_path, tag_name, print_log=False):
    '''

    Args:
        path:
        file_name:
        tag_name:

    Returns: the average value of the last 10 percent of the selected data file with a tag given.

    '''
    if print_log: print(file_path)

    value_set = []
    for summary_set in tf.compat.v1.train.summary_iterator(file_path):
        for value in summary_set.summary.value:
            if value.tag == tag_name:
                value_set.append(value.simple_value)
                if print_log: print("step", summary_set.step, tag_name+" value", value.simple_value)

    # get last 10 percent element in the 'value_set'
    last_10_size = int(len(value_set)/10)
    value_set_last_10 = value_set[-last_10_size:]
    ave_value = sum(value_set_last_10)/len(value_set_last_10) if len(value_set_last_10) else 0
    if print_log: print("average", ave_value)
    return ave_value


def optimal_def_trial_finder(vary_set, scheme):
    '''

    Args:
        vary_set:

    Returns: Find the optimal trial by looking for the highest reward. Return the file path and highest reward value.

    '''
    if scheme == 'att':
        tag_name = "Averaged Reward Attacker"
    else:
        tag_name = "Averaged Reward Defender"
    for val in vary_set:
        setting_folder = str(val)+'_5'
        print("searching", setting_folder)
        path_lsit = glob.glob('data/'+setting_folder+'/runs_def/*-eps')
        max_value = 0
        max_path = None
        for path in path_lsit:
            file_name = listdir(path)[0]  # only one file in the directory
            ave_value = get_average_value_with_path(path+'/'+file_name, tag_name)
            if ave_value > max_value:
                max_value = ave_value
                max_path = path
                print(max_path, max_value)

    return max_path, max_value

def top_10_trial_finder(vary_set, scheme):
    '''

    Args:
        vary_set:
        scheme:

    Returns: Find the optimal trial by looking for the highest reward. Return the file path and highest reward value.

    '''
    if scheme == 'att':
        tag_name = "Averaged Reward Attacker"
    else:
        tag_name = "Averaged Reward Defender"

    top_value_list = []
    top_path_list = []

    for val in vary_set:
        setting_folder = str(val)+'_5'
        print("searching", setting_folder)
        path_lsit = glob.glob('data/'+setting_folder+'/runs_'+scheme+'/*-eps')
        value_set = []
        path_set = []
        # max_value = 0
        # max_path = None
        for path in path_lsit:
            file_name = listdir(path)[0]  # only one file in the directory
            ave_value = get_average_value_with_path(path+'/'+file_name, tag_name)
            value_set.append(ave_value)
            path_set.append(path+'/'+file_name)
            # if ave_value > max_value:
            #     max_value = ave_value
            #     max_path = path
            #     print(max_path, max_value)
        sorted_index_set = np.argsort(value_set)
        top_10_index_set = sorted_index_set[-10:]
        top_10_value = np.take(value_set, top_10_index_set)
        top_10_path = np.take(path_set, top_10_index_set)
        # print("value_set", value_set)
        # print("path_set", path_set)
        # print("top_10_value", top_10_value)
        # print("top_10_path", top_10_path)
        top_value_list.append(top_10_value)
        top_path_list.append(top_10_path)

    return top_value_list, top_path_list

def all_none_trial_finder(vary_set, scheme):
    '''

    Args:
        vary_set:
        scheme:

    Returns: Find the optimal trial by looking for the highest reward. Return the file path and highest reward value.

    '''
    all_path_list = []

    for val in vary_set:
        setting_folder = str(val)+'_5'
        print("searching", setting_folder)
        path_lsit = glob.glob('data/'+setting_folder+'/runs_'+scheme+'/*-eps')
        value_set = []
        path_set = []
        # max_value = 0
        # max_path = None
        for path in path_lsit:
            file_name = listdir(path)[0]  # only one file in the directory
            path_set.append(path+'/'+file_name)

        all_path_list.append(path_set)
        print("val", val, "path", path_set)

    return all_path_list


def draw_sens_analysis(vary_set, trial_set, scheme, tag_name):
    y_set = []
    for id in range(len(vary_set)):
        setting_folder = str(vary_set[id])+'_5'
        y_set.append(get_average_value(setting_folder, scheme, trial_set[id], tag_name))

    plt.figure(figsize=(figure_width, figure_high))
    plt.plot(vary_set, y_set)
    plt.xlabel("Varying Mission Time Limitation (scheme: "+scheme+")", fontsize=font_size)
    plt.ylabel(tag_name, fontsize=font_size)
    plt.tight_layout()
    plt.savefig("figures/"+tag_name+".svg", dpi=figure_dpi)
    plt.savefig("figures/"+tag_name+".eps", dpi=figure_dpi)
    plt.savefig("figures/"+tag_name+".png", dpi=figure_dpi)
    plt.show()


def draw_sens_analysis_ave_trial(vary_set, trial_set, scheme, tag_name):
    '''
    Draw sensitivity analysis result. If there more than one data for the given trial, use all data to calculate
    average value.
    Args:
        vary_set:
        trial_set:
        scheme:
        tag_name:

    Returns:

    '''
    y_set = []
    for id in range(len(vary_set)):
        setting_folder = str(vary_set[id])+'_5'
        y_set.append(get_average_value(setting_folder, scheme, trial_set[id], tag_name))

    plt.figure(figsize=(figure_width, figure_high))
    plt.plot(vary_set, y_set)
    plt.xlabel("Varying Mission Time Limitation (scheme: "+scheme+")", fontsize=font_size)
    plt.ylabel(tag_name, fontsize=font_size)
    plt.tight_layout()
    plt.savefig("figures/"+tag_name+".svg", dpi=figure_dpi)
    plt.savefig("figures/"+tag_name+".eps", dpi=figure_dpi)
    plt.savefig("figures/"+tag_name+".png", dpi=figure_dpi)
    plt.show()


def draw_list_averaged_sens_analysis(vary_set, scheme, all_path_list, tag_name):
    y_set = []
    for top_path_set in all_path_list:
        y_set_temp = []
        for top_path in top_path_set:
            y_value = get_average_value_with_path(top_path, tag_name)
            y_set_temp.append(y_value)
        y_ave = sum(y_set_temp)/len(y_set_temp) if len(y_set_temp) else 0
        y_set.append(y_ave)

    plt.figure(figsize=(figure_width, figure_high))
    plt.plot(vary_set, y_set)
    plt.xlabel("Varying Mission Time Limitation (scheme: " + scheme + ")", fontsize=font_size)
    plt.ylabel(tag_name, fontsize=font_size)
    plt.tight_layout()
    plt.savefig("figures/scheme-" + scheme + " tag-" + tag_name + ".svg", dpi=figure_dpi)
    plt.savefig("figures/scheme-" + scheme + " tag-" + tag_name + ".eps", dpi=figure_dpi)
    plt.savefig("figures/scheme-" + scheme + " tag-" + tag_name + ".png", dpi=figure_dpi)
    plt.show()

def draw_all_scheme_sens_analysis(vary_set, all_scheme_path, tag_name):
    plt.figure(figsize=(figure_width, figure_high))

    for key in all_scheme_path.keys():
        y_set = []
        all_path_list = all_scheme_path[key]
        for path_set in all_path_list:
            print("key", key, ". Reading: path_set", path_set)
            y_set_temp = []
            for path in path_set:
                y_value = get_average_value_with_path(path, tag_name)
                y_set_temp.append(y_value)
            y_ave = sum(y_set_temp)/len(y_set_temp) if len(y_set_temp) else 0
            y_set.append(y_ave)

        plt.plot(vary_set, y_set, linestyle=linestyle[key], linewidth=figure_linewidth, markersize=marker_size, marker=marker_set[key], label=scheme_set[key])

    plt.legend(fontsize=legend_size)
    plt.xlabel("Mission duration threshold", fontsize=font_size)
    plt.ylabel(scheme2string[tag_name], fontsize=font_size)
    plt.xticks(fontsize=axis_size)
    plt.yticks(fontsize=axis_size)
    plt.tight_layout()
    plt.savefig("figures/exp-result-matrix-" + tag_name + ".pdf", format='pdf', dpi=figure_dpi)
    plt.savefig("figures/exp-result-matrix-" + tag_name + ".eps", format='eps', dpi=figure_dpi)
    plt.savefig("figures/exp-result-matrix-" + tag_name + ".png", format='png', dpi=figure_dpi)
    plt.show()


if __name__ == '__main__':
    # setting for data to read
    setting_folder = '50_5'
    scheme_name = 'att'
    trial_id = 98
    tag_name = "Ratio of Mission Completion"
    vary_set = [30, 35, 40, 45, 50]
    scheme_set = {'rand-rand': "A-Random, D-Random", 'rl-rand': "A-A3C, D-Random", 'rand-rl': "A-Random, D-A3C", 'rl-rl': "A-A3C, D-A3C"}
    linestyle = {'rand-rand': '-', 'rl-rand': '--', 'rand-rl': '-.', 'rl-rl': ':'}
    marker_set = {'rand-rand': "p", 'rl-rand': "d", 'rand-rl': "v", 'rl-rl': "x"}
    scheme2string = {"Ratio of Mission Completion": "Ratio of completed mission\n tasks",
                     "Energy Consumption":          "Energy consumption (mW)",
                     "Attack Success Rate":         "Attack success ratio",
                     "Mission Time (step)":         "Mission completion time",
                     "Average Connect_RLD MD+HD Number": "Number of non-compromised,\n connected drones"}



    # setting for figure
    font_size = 25  # 25
    figure_high = 6  # 6
    figure_width = 7.5
    figure_linewidth = 3
    figure_dpi = 100
    legend_size = 18  # 18
    axis_size = 15
    marker_size = 12
    marker_list = ["p", "d", "v", "x", "s", "*", "1", "."]
    strategy_number = 8
    max_x_length = 60
    use_legend = False

    # find optimal defender's trial by looking at the reward
    # optimal_def_trial_finder(vary_set, 'def')

    # # sensitivity analysis results for scheme 'def_RL-att_Random'
    # use selected trial
    def_best_trial_set = ['None', 'None', 'None', 'None', 'None']
    scheme_name = "def"
    # draw_sens_analysis_ave_trial(vary_set, def_best_trial_set, scheme_name, "Ratio of Mission Completion")
    # draw_sens_analysis(vary_set, def_best_trial_set, scheme_name, "Ratio of Mission Completion")
    # draw_sens_analysis(vary_set, def_best_trial_set, scheme_name, "Energy Consumption")
    # draw_sens_analysis(vary_set, def_best_trial_set, scheme_name, "Attack Success Rate")
    # draw_sens_analysis(vary_set, def_best_trial_set, scheme_name, "Mission Time (step)")
    # draw_sens_analysis(vary_set, def_best_trial_set, scheme_name, "Average Connect_RLD MD+HD Number")

    # # sensitivity analysis results for scheme 'def_Random-att_RL'
    # use selected trial
    att_best_trial_set = ['None', 'None', 'None', 'None', 'None']
    scheme_name = "att"
    # draw_sens_analysis(vary_set, att_best_trial_set, scheme_name, "Ratio of Mission Completion")
    # draw_sens_analysis(vary_set, att_best_trial_set, scheme_name, "Energy Consumption")
    # draw_sens_analysis(vary_set, att_best_trial_set, scheme_name, "Attack Success Rate")
    # draw_sens_analysis(vary_set, att_best_trial_set, scheme_name, "Mission Time (step)")
    # draw_sens_analysis(vary_set, att_best_trial_set, scheme_name, "Average Connect_RLD MD+HD Number")


    # use top 10 best trial
    scheme_name = "att"
    # top_value_list, top_path_list = top_10_trial_finder(vary_set, scheme_name)
    # draw_list_averaged_sens_analysis(vary_set, scheme_name, top_path_list, "Ratio of Mission Completion")
    # draw_list_averaged_sens_analysis(vary_set, scheme_name, top_path_list, "Energy Consumption")
    # draw_list_averaged_sens_analysis(vary_set, scheme_name, top_path_list, "Attack Success Rate")
    # draw_list_averaged_sens_analysis(vary_set, scheme_name, top_path_list, "Mission Time (step)")
    # draw_list_averaged_sens_analysis(vary_set, scheme_name, top_path_list, "Average Connect_RLD MD+HD Number")


    # use all trial
    all_scheme_path_set = {}
    scheme_name = "def"
    all_path_list = all_none_trial_finder(vary_set, scheme_name)
    all_scheme_path_set['rand-rl'] = all_path_list
    scheme_name = "att"
    all_path_list = all_none_trial_finder(vary_set, scheme_name)
    all_scheme_path_set['rl-rand'] = all_path_list

    draw_all_scheme_sens_analysis(vary_set, all_scheme_path_set, "Ratio of Mission Completion")
    draw_all_scheme_sens_analysis(vary_set, all_scheme_path_set, "Energy Consumption")
    draw_all_scheme_sens_analysis(vary_set, all_scheme_path_set, "Attack Success Rate")
    draw_all_scheme_sens_analysis(vary_set, all_scheme_path_set, "Mission Time (step)")
    draw_all_scheme_sens_analysis(vary_set, all_scheme_path_set, "Average Connect_RLD MD+HD Number")


